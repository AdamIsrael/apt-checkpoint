#!/usr/bin/python
import apt_pkg						# Our interface to local packages
import pickle						# Object serialization
import os, sys, commands
from datetime import datetime		
import time, locale
from optparse import OptionParser	# To handle command line args
import gzip 						# To read Packages.gz
import httplib, urlparse			# To download files
import tempfile						# To handle temp files
import re							# Regular expressions
import string						# string handling

# Configuration Settings
CACHE = '/var/cache/apt/checkpoint'
ARCHIVE = '/var/cache/apt/archives'
SNAPSHOT = 'http://snapshot.debian.net/archive/'

# Internal objects
cache = None
packages = None
parser = None
options = None

class PackagesGz:
	Packages = []
	def __init__(self, file):
		self.Packages = self.parse(string.join(gzip.open(file)))
		pass
	def parse(self,source):
		# Parse the Packages.gz source into a hash table
		# Packages are seperated by \n\n
		# Each package record is <key>: <value>
		Packages = []
		Package = {}
		record = ''
		# Buffer one record at a time, then parse it
		for line in source.split('\n'):
			if len(line.strip()) == 0:
				# We have a `record`, with pairs of fields (key, value)
				# `key` is start of line up to the first colon `:`
				# `value` is everything from the `:` until the next line
				# containing a `:` (multi-line values)
				key = ''
				value = ''
				while(len(record) > 0):
					if len(key) == 0:
						idx = record.find(':')
						if idx >= 0:
							key = record[0:idx]
							record = record[idx+1:]
					else:
						if len(value) > 0:
							if (record.find(':') >= 0 and record.find(':') < record.find('\n')):
								# done with this key:value pair
								Package[key.strip()] = value.strip()
								key = ''
								value = ''
								continue
						idx = record.find('\n')
						if idx >= 0:
							value += record[0:idx]
							record = record[idx+1:]
							if len(record) == 0:
								# Last key:value pair of record
								Package[key.strip()] = value.strip()
								key = ''
								value = ''
								Packages.append(Package)
								Package = {}
				record = ''
				pass
			else:
				record += line + '\n'
		return Packages


		
class Checkpoint:
	Description = None
	Packages = {}
	def __init__(self):
		pass

class Package:
	Version = None
	Name = None
	State = None
	FileName = None
	def __init__(self):
		pass

# From the department of redundancy department...
# Make our Package object from apt_pkg's Package object
def getpackage(package):
	global cache
	records = apt_pkg.GetPkgRecords(cache)
	records.Lookup(package.CurrentVer.FileList[0])
	p = Package()
	p.Name = package.Name
	p.Version = package.CurrentVer.VerStr
	p.State = package.CurrentState
	p.FileName = records.FileName
	return p

# Find the .deb belonging to this package
def findpackage(pkg):
	deb = ''
	if len(pkg.FileName) > 0:
		# First, check to see if the package is in the local archive
		deb = ARCHIVE + os.sep + pkg.FileName.split('/')[-1:][0]
		if(not os.path.exists(deb)):
			deb = ''
		else:
			pkg.FileName = deb
		# TODO: Next, check for apt-mirror or other local alternatives
		
		# Last, download the needed packages from snapshot.debian.net
		if len(deb) == 0:
			#http://snapshot.debian.net/archive/pool/i/imagemagick/binary-i386/Packages.gz
			name = re.match('pool/\w+/\w/(.+)/', pkg.FileName).group(1)
			Packages = '%spool/%s/%s/binary-%s/Packages.gz' % (SNAPSHOT, name[0:1], name, apt_pkg.CPU)
			file = HttpDownload(Packages)
		
			# Download Packages.gz
			pkgz = PackagesGz(file)
			
			for p in pkgz.Packages:
				if p['Package'] == pkg.Name:
					if p['Version'] == pkg.Version:
						if p['Architecture'] in (apt_pkg.CPU, 'any', 'all'):
							deb = '%s%s' % (SNAPSHOT, p['Filename'])
							break
						else:
							print pkg.Name, ":", p['Architecture']
			# Remove temp file
			os.remove(file)
			if len(deb) > 0:
				# We found a package on snapshot.debian.net,
				# so download it to the local archive/ cache
				
				# Get the local file name
				localdeb = '%s/%s' % (ARCHIVE, deb[deb.rfind('/'):])
				HttpDownload(deb, localdeb)
				pkg.FileName = localdeb
				pass
	if len(deb) > 0:
		return pkg
	return pkg

def removepackage(pkg):
	print commands.getoutput('dpkg --force-depends,downgrade,depends-version -r "%s"' % (pkg.Name))
def installpackage(deb):
	print commands.getoutput('dpkg --force-depends,depends-version -i "%s"' % (deb.FileName))

def initialize():
	global cache, packages
	apt_pkg.init()
	cache = apt_pkg.GetCache()
	packages = cache.Packages
	if not os.path.exists(CACHE):
		os.mkdir(CACHE)

def HttpDownload(url, dest=None):
	if not dest:
		dest = tempfile.mkstemp()[1]
	print "Downloading", url, "to", dest
	#commands.getoutput('wget -O "%s" "%s"' % (dest, url))
	os.popen('wget -O "%s" "%s"' % (dest, url))
	return dest
	
# Get a list of available checkpoints in the CACHE
def getCheckpoints():
	checkpoints = os.listdir(CACHE)
	return checkpoints

def diff():
	global packages
	initialize()
	checkpoints = getCheckpoints()

	# default to the most recent checkpoint
	checkpoint = pickle.load(open(CACHE + os.sep + checkpoints[len(checkpoints)-1]))
	for package in packages:
		versions = package.VersionList
		if package.Name in checkpoint.Packages and package.CurrentState != 6:
			print "Package found in checkpoint but not installed: ", package.Name
		elif package.CurrentState == 6 and package.Name not in checkpoint.Packages:
			print "Package not found in checkpoint but installed: ", package.Name
		elif package.CurrentState == 6 and package.Name in checkpoint.Packages:
			v = apt_pkg.VersionCompare(package.CurrentVer.VerStr, checkpoint.Packages[package.Name].Version)
			if v == 1:
				print "%s: Version differs(%s -> %s)" % (package.Name, checkpoint.Packages[package.Name].Version, versions[0].VerStr)	
	pass


def create():
	global cache
	initialize()
	cp = Checkpoint()
	cp.Packages = {}
	records = apt_pkg.GetPkgRecords(cache)
	for package in packages:
		#versions = package.VersionList
		#if not versions:
		#	continue
		if package.CurrentVer and package.CurrentState == 6:
			p = getpackage(package)
			cp.Packages[package.Name] = p
	if cp.Packages:
		cp.Description = options.description
		print len(cp.Packages), "installed packages"
		chkpt = CACHE + os.sep + time.strftime('%Y-%m-%d-%H-%M') + '.bin'
		print chkpt
		pickle.dump(cp, open(chkpt, 'w'))

	pass
def rollback():
	global packages
	initialize()
	checkpoints = getCheckpoints()
	
	remove = []		# Packages to be removed
	install = []	# Packages to be installed
	
	checkpoint = pickle.load(open(CACHE + os.sep + checkpoints[len(checkpoints)-1]))
	print 'Comparing', len(checkpoint.Packages), 'out of', len(packages), 'packages'

	# Iterate through the list of all packages and make a list packages
	# that need to be removed or installed
	for package in packages:
		if package.Name in checkpoint.Packages:
			if not package.CurrentVer:
				install.append(checkpoint.Packages[package.Name])
				print "Package", package.Name, "has no current version"
			else:
				v = apt_pkg.VersionCompare(package.CurrentVer.VerStr, checkpoint.Packages[package.Name].Version)
				if v > 0:
					remove.append(getpackage(package))
					if package.CurrentState == 6:
						install.append(checkpoint.Packages[package.Name])
		else:
			if package.CurrentState == 6:
				remove.append(getpackage(package))
	print len(remove), "packages to be removed"
	print len(install), "packages to be installed"

	for package in remove:
		removepackage(package)
	for package in install:
		installpackage(findpackage(package))
	return
#					#
	pass


def view():
	checkpoints = getCheckpoints()
	count = 1
	for checkpoint in checkpoints:
		chk = pickle.load(open(CACHE + os.sep + checkpoint))
		t = time.strptime(checkpoint.split('.')[0], '%Y-%m-%d-%H-%M')
		print '[' + str(count) + '] ',time.strftime(locale.nl_langinfo(locale.D_T_FMT), t), '[' + chk.Description + ']'
		count += 1
	pass

def Help():
	usage = """	%prog [options] command
	%prog [options] create
	%prog [options] diff
	%prog [options] rollback
	%prog [options] view
	
apt-checkpoint is a simple command line interface for saving and
restoring package checkpoints.  The most frequently used commands
are create, diff, and rollback.

commands:
    create - Create a checkpoint of the current system
    diff - View the difference between the current and checkpointed system
    rollback - Restore the system to it's previously saved state
    view - View saved checkpoints
	"""
	return usage


def CachePackage(pkg):
	# Download a package and cache it locally
	
	# Get Releases.gz from snapshot.debian.net

	# Find package record matching this package

	# Download package to local archive

	
	pass
	
def main():	
	global parser, options
	parser = OptionParser(Help())
	parser.add_option("-d", "--description",
					dest="description",
					help="Checkpoint description")
	parser.add_option("-c", "--clean",
		type="int", dest="clean",
		help="Erase checkpoints more than n days old")
	parser.add_option("-v", "--version",
		dest="version", action="store_true", default=False,
		help="Display version")
	
	(options, args) = parser.parse_args()
	if len(sys.argv) == 1:
		parser.print_help()
		return 0
		
	command = sys.argv[1]
	if command in ['create', 'diff', 'rollback', 'view']:
		exec(command + "()")
		pass
	else:
		parser.print_help()
	return 0

if __name__ == "__main__":
	main()



